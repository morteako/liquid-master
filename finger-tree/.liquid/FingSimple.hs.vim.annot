1:1-1:1::Main.$trModule :: "GHC.Types.Module"
12:1-12:10::Main.digitSize :: "forall a##xo .\nx1:(Main.Digit a##xo)\n-> {VV : GHC.Types.Int | VV == digitSize x1}"
40:1-40:15::Main.fingerTreeSize :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> {VV : GHC.Types.Int | VV == fingerTreeSize x1\n                         && VV == size to1 x1}"
40:16-40:17::t :: "(Main.FingerTree a##xo)"
40:20-40:28::lq_anf$##7205759403792807055 :: "{v : x1:a##xo\n     -> {v : GHC.Types.Int | v == to1 x1\n                             && v == 1} | v == to1}"
44:1-44:5::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
45:21-45:22::_ :: "a##xo\n-> GHC.Types.Int"
46:23-46:31::_ :: "(Main.Digit a##xo)\n-> GHC.Types.Int"
46:34-46:35::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
46:36-46:50::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
46:42-46:49::lq_anf$##7205759403792807051 :: "(Main.Node a##xo)\n-> GHC.Types.Int"
46:53-46:54::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
46:55-46:63::_ :: "(Main.Digit a##xo)\n-> GHC.Types.Int"
50:1-50:7::Main.digitS :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.Digit a##xo)\n   -> {VV : GHC.Types.Int | VV == digitS x1 x3}"
50:8-50:9::f :: "a##xo\n-> GHC.Types.Int"
50:20-50:21::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
51:22-51:23::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
51:26-51:27::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
51:28-51:29::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
52:26-52:27::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
52:30-52:31::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
52:32-52:33::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
52:36-52:37::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
52:38-52:39::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
53:27-53:28::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
53:31-53:32::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
53:33-53:34::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
53:37-53:38::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
53:39-53:40::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
53:43-53:44::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
53:45-53:46::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
57:1-57:6::Main.nodeS :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.Node a##xo)\n   -> {VV : GHC.Types.Int | VV == nodeS x1 x3}"
57:7-57:8::f :: "a##xo\n-> GHC.Types.Int"
57:25-57:26::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
57:29-57:30::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
57:31-57:32::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
58:25-58:26::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
58:29-58:30::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
58:31-58:32::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
58:35-58:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
58:37-58:38::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
62:1-62:4::Main.to1 :: "forall a##xo .\nx1:a##xo\n-> {VV : GHC.Types.Int | VV == to1 x1\n                         && VV == 1}"
66:1-66:6::Main.empty :: "forall a##xo .\n{VV : (Main.FingerTree a##xo) | fingerTreeSize VV == 0}"
69:1-69:8::Main.isEmpty :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> {VV : GHC.Types.Bool | VV <=> isEmpty x1}"
75:1-75:10::Main.singleton :: "forall a##xo .\na##xo\n-> {VV : (Main.FingerTree a##xo) | fingerTreeSize VV == 1}"
75:11-75:12::a :: "a##xo"
80:1-80:9::Main.fromList :: "forall a##xo .\nx1:[a##xo]\n-> {ft : (Main.FingerTree a##xo) | fingerTreeSize ft == len x1}"
80:10-80:12::xs :: "[a##xo]"
80:15-80:22::lq_anf$##7205759403792807107 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
80:25-80:36::lq_anf$##7205759403792807108 :: "{v : () | len xs == fingerTreeSize (from xs)}"
86:1-86:5::Main.from :: "forall a##xo .\n[a##xo]\n-> (Main.FingerTree a##xo)"
87:15-87:27::x :: "{VV : a##xo | VV == x}"
87:20-87:27::lq_anf$##7205759403792806968 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
91:1-91:9::Main.lem_from :: "forall a##xo .\nx1:[a##xo]\n-> {VV : () | len x1 == fingerTreeSize (from x1)}"
92:19-92:32::_ :: "x1:(Main.FingerTree a##xo)\n-> {v : () | size to1 (<| x x1) == size to1 x1 + to1 x}"
92:34-92:41::lq_anf$##7205759403792807104 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
92:43-92:46::_ :: "{v : ()\n     -> ()\n        -> () | v == &&&}"
92:47-92:58::lq_anf$##7205759403792807106 :: "{v : () | len xs == fingerTreeSize (from xs)}"
96:1-96:2::a :: "a##xo"
96:3-96:5::Main.<| :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : (Main.FingerTree a##xo) | VV == <| x1 x2}"
97:28-97:40::lq_anf$##7205759403792806953 :: "{v : (Main.Digit a##xo) | lqdc##$select v == a\n                          && digitSize v == 1\n                          && v == One a}"
98:33-98:47::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && (isEmpty v <=> false)}"
98:39-98:44::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
98:49-98:56::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
100:5-100:26::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && (isEmpty v <=> false)}"
100:11-100:22::_ :: "{v : x1:{v : (Main.Digit a##xo) | digitSize v < 4}\n     -> {v : (Main.Digit a##xo) | digitSize v == digitSize x1 + 1\n                                  && v == consDigit a x1} | v == consDigit a}"
109:1-109:12::Main.lem_add_to1 :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : () | size to1 (<| x1 x2) == size to1 x2 + to1 x1}"
109:13-109:14::a :: "a##xo"
109:15-109:16::t :: "(Main.FingerTree a##xo)"
109:19-109:28::Main.lem_add :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:(a##xo\n       -> GHC.Types.Int)\n   -> x4:a##xo\n      -> {VV : () | size x2 (<| x4 x1) == size x2 x1 + x2 x4}"
113:1-113:8::Main.lem_add :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:(a##xo\n       -> GHC.Types.Int)\n   -> x4:a##xo\n      -> {VV : () | size x2 (<| x4 x1) == size x2 x1 + x2 x4}"
113:15-113:16::f :: "a##xo\n-> GHC.Types.Int"
113:17-113:18::a :: "a##xo"
116:6-116:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
116:10-116:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
116:12-116:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
116:16-116:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
116:18-116:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
116:24-116:31::lq_anf$##7205759403792807062 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
116:34-116:41::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
116:52-116:53::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
116:54-116:62::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
117:6-117:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
117:10-117:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
117:12-117:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
117:16-117:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
117:18-117:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
117:24-117:31::lq_anf$##7205759403792807072 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
117:34-117:41::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
117:52-117:53::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
117:54-117:62::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
117:70-117:79::Main.lem_add :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:(a##xo\n       -> GHC.Types.Int)\n   -> x4:a##xo\n      -> {VV : () | size x2 (<| x4 x1) == size x2 x1 + x2 x4}"
117:81-117:88::lq_anf$##7205759403792807080 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
117:91-117:98::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
118:6-118:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
118:10-118:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
118:12-118:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
118:16-118:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
118:18-118:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
118:24-118:31::lq_anf$##7205759403792807087 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
118:35-118:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
118:37-118:44::_ :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
118:46-118:53::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
118:59-118:60::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
118:61-118:69::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
119:30-119:41::_ :: "{v : x1:{v : (Main.Digit a##xo) | digitSize v < 4}\n     -> {v : (Main.Digit a##xo) | digitSize v == digitSize x1 + 1\n                                  && v == consDigit a x1} | v == consDigit a}"
123:7-123:9::Main.|> :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:a##xo\n   -> {VV : (Main.FingerTree a##xo) | VV == |> x1 x2}"
123:10-123:11::a :: "a##xo"
124:28-124:40::lq_anf$##7205759403792806976 :: "{v : (Main.Digit a##xo) | lqdc##$select v == a\n                          && digitSize v == 1\n                          && v == One a}"
126:5-126:12::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && lqdc##$select v == pr\n                                     && (isEmpty v <=> false)\n                                     && v == Deep pr x1 x2}"
126:14-126:30::lq_anf$##7205759403792806982 :: "(Main.FingerTree (Main.Node a##xo))"
126:19-126:26::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
126:33-126:38::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == d\n                             && digitSize v == 2\n                             && v == Two d x1}"
128:5-128:12::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && lqdc##$select v == pr\n                                     && (isEmpty v <=> false)\n                                     && v == Deep pr x1 x2}"
128:16-128:28::_ :: "a##xo\n-> (Main.Digit a##xo)"
135:1-135:10::Main.consDigit :: "forall a##xo .\na##xo\n-> x2:{d : (Main.Digit a##xo) | digitSize d < 4}\n   -> {dd : (Main.Digit a##xo) | digitSize dd == digitSize x2 + 1}"
135:11-135:12::a :: "a##xo"
135:23-135:28::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
136:25-136:32::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Digit a##xo) | lqdc##$select v == x2\n                                && lqdc##$select v == x1\n                                && lqdc##$select v == a\n                                && digitSize v == 3\n                                && v == Three a x1 x2}"
137:29-137:35::_ :: "x1:a##xo\n-> x2:a##xo\n   -> x3:a##xo\n      -> {v : (Main.Digit a##xo) | lqdc##$select v == x3\n                                   && lqdc##$select v == x2\n                                   && lqdc##$select v == x1\n                                   && lqdc##$select v == a\n                                   && digitSize v == 4\n                                   && v == Four a x1 x2 x3}"
142:1-142:10::Main.snocDigit :: "forall a##xo .\nx1:{d : (Main.Digit a##xo) | digitSize d < 4}\n-> a##xo\n   -> {dd : (Main.Digit a##xo) | digitSize dd == digitSize x1 + 1}"
142:19-142:20::b :: "a##xo"
142:23-142:28::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
143:25-143:32::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Digit a##xo) | lqdc##$select v == x2\n                                && lqdc##$select v == x1\n                                && lqdc##$select v == a\n                                && digitSize v == 3\n                                && v == Three a x1 x2}"
144:29-144:35::_ :: "x1:a##xo\n-> x2:a##xo\n   -> x3:a##xo\n      -> {v : (Main.Digit a##xo) | lqdc##$select v == x3\n                                   && lqdc##$select v == x2\n                                   && lqdc##$select v == x1\n                                   && lqdc##$select v == a\n                                   && digitSize v == 4\n                                   && v == Four a x1 x2 x3}"
148:1-148:14::Main.lem_add_r_to1 :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : () | size to1 (|> x2 x1) == size to1 x2 + to1 x1}"
148:15-148:16::a :: "a##xo"
148:17-148:18::t :: "(Main.FingerTree a##xo)"
148:21-148:32::Main.lem_add_r :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:(a##xo\n       -> GHC.Types.Int)\n   -> x4:a##xo\n      -> {VV : () | size x2 (|> x1 x4) == size x2 x1 + x2 x4}"
152:1-152:10::Main.lem_add_r :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:(a##xo\n       -> GHC.Types.Int)\n   -> x4:a##xo\n      -> {VV : () | size x2 (|> x1 x4) == size x2 x1 + x2 x4}"
152:17-152:18::f :: "a##xo\n-> GHC.Types.Int"
152:19-152:20::a :: "a##xo"
155:5-155:105::lq_anf$##7205759403792807152 :: "GHC.Types.Int"
155:6-155:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
155:10-155:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
155:12-155:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
155:16-155:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
155:18-155:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
155:24-155:31::lq_anf$##7205759403792807142 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
155:34-155:50::lq_anf$##7205759403792807144 :: "(Main.FingerTree (Main.Node a##xo))"
155:39-155:46::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
155:52-155:53::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
155:54-155:62::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
155:69-155:80::Main.lem_add_r :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:(a##xo\n       -> GHC.Types.Int)\n   -> x4:a##xo\n      -> {VV : () | size x2 (|> x1 x4) == size x2 x1 + x2 x4}"
155:82-155:89::lq_anf$##7205759403792807149 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
155:92-155:99::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
156:6-156:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
156:10-156:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
156:12-156:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
156:16-156:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
156:18-156:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
156:24-156:31::lq_anf$##7205759403792807156 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
156:35-156:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
156:37-156:44::_ :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
156:46-156:53::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
156:59-156:60::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
156:61-156:69::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
157:30-157:41::_ :: "a##xo\n-> (Main.Digit a##xo)"
162:1-162:10::Main.fromListR :: "forall a##xo .\nx1:[a##xo]\n-> {ft : (Main.FingerTree a##xo) | fingerTreeSize ft == len x1}"
162:11-162:13::xs :: "[a##xo]"
162:16-162:24::lq_anf$##7205759403792807176 :: "{v : (Main.FingerTree a##xo) | v == fromR xs}"
162:27-162:40::lq_anf$##7205759403792807177 :: "{v : () | len xs == fingerTreeSize (fromR xs)}"
168:1-168:6::Main.fromR :: "forall a##xo .\n[a##xo]\n-> (Main.FingerTree a##xo)"
169:16-169:24::lq_anf$##7205759403792806991 :: "{v : (Main.FingerTree a##xo) | v == fromR xs}"
173:1-173:11::Main.lem_from_r :: "forall a##xo .\nx1:[a##xo]\n-> {VV : () | len x1 == fingerTreeSize (fromR x1)}"
174:21-174:36::_ :: "x1:(Main.FingerTree a##xo)\n-> {v : () | size to1 (|> x1 x) == size to1 x1 + to1 x}"
174:38-174:46::lq_anf$##7205759403792807173 :: "{v : (Main.FingerTree a##xo) | v == fromR xs}"
174:48-174:51::_ :: "{v : ()\n     -> ()\n        -> () | v == &&&}"
174:52-174:65::lq_anf$##7205759403792807175 :: "{v : () | len xs == fingerTreeSize (fromR xs)}"
178:1-178:4::Main.ft1 :: "{VV : (Main.FingerTree GHC.Types.Int) | fingerTreeSize VV == 10}"
178:7-178:38::lq_anf$##7205759403792807129 :: "[GHC.Types.Int]"
182:1-182:4::Main.ft2 :: "{VV : (Main.FingerTree GHC.Types.Int) | fingerTreeSize VV == 10}"
182:7-182:39::lq_anf$##7205759403792807198 :: "[GHC.Types.Int]"
187:1-187:5:::Main.main :: "(GHC.Types.IO ())"
188:5-188:10::_ :: "[GHC.Types.Char]\n-> (GHC.Types.IO ())"
189:5-189:31::lq_anf$##7205759403792807135 :: "(GHC.Types.IO ())"
189:13-189:31::lq_anf$##7205759403792807134 :: "{v : GHC.Types.Int | v == fingerTreeSize ft1\n                     && v == size to1 ft1}"