1:1-1:1::Main.$trModule :: "GHC.Types.Module"
13:1-13:10::Main.digitSize :: "forall a##xo .\nx1:(Main.Digit a##xo)\n-> {VV : GHC.Types.Int | VV == digitSize x1}"
39:1-39:15::Main.fingerTreeSize :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> {VV : GHC.Types.Int | VV == fingerTreeSize x1\n                         && VV == size to1 x1}"
39:16-39:17::t :: "(Main.FingerTree a##xo)"
39:20-39:28::lq_anf$##7205759403792806594 :: "{v : x1:a##xo\n     -> {v : GHC.Types.Int | v == to1 x1\n                             && v == 1} | v == to1}"
43:1-43:5::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
44:21-44:22::_ :: "a##xo\n-> GHC.Types.Int"
45:23-45:31::_ :: "(Main.Digit a##xo)\n-> GHC.Types.Int"
45:34-45:35::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
45:36-45:50::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
45:42-45:49::lq_anf$##7205759403792806590 :: "(Main.Node a##xo)\n-> GHC.Types.Int"
45:53-45:54::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
45:55-45:63::_ :: "(Main.Digit a##xo)\n-> GHC.Types.Int"
49:1-49:7::Main.digitS :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.Digit a##xo)\n   -> {VV : GHC.Types.Int | VV == digitS x1 x3}"
49:8-49:9::f :: "a##xo\n-> GHC.Types.Int"
49:20-49:21::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
50:22-50:23::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
50:26-50:27::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
50:28-50:29::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
51:26-51:27::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
51:30-51:31::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
51:32-51:33::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
51:36-51:37::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
51:38-51:39::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
52:27-52:28::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
52:31-52:32::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
52:33-52:34::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
52:37-52:38::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
52:39-52:40::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
52:43-52:44::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
52:45-52:46::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
56:1-56:6::Main.nodeS :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.Node a##xo)\n   -> {VV : GHC.Types.Int | VV == nodeS x1 x3}"
56:7-56:8::f :: "a##xo\n-> GHC.Types.Int"
56:25-56:26::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
56:29-56:30::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
56:31-56:32::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
57:25-57:26::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
57:29-57:30::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
57:31-57:32::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
57:35-57:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
57:37-57:38::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
61:1-61:4::Main.to1 :: "forall a##xo .\nx1:a##xo\n-> {VV : GHC.Types.Int | VV == to1 x1\n                         && VV == 1}"
65:1-65:6::Main.empty :: "forall a##xo .\n{VV : (Main.FingerTree a##xo) | fingerTreeSize VV == 0}"
68:1-68:8::Main.isEmpty :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> {VV : GHC.Types.Bool | VV <=> isEmpty x1}"
74:1-74:10::Main.singleton :: "forall a##xo .\na##xo\n-> {VV : (Main.FingerTree a##xo) | fingerTreeSize VV == 1}"
74:11-74:12::a :: "a##xo"
79:1-79:9::Main.fromList :: "forall a##xo .\nx1:[a##xo]\n-> {ft : (Main.FingerTree a##xo) | fingerTreeSize ft == len x1}"
79:10-79:12::xs :: "[a##xo]"
79:15-79:22::lq_anf$##7205759403792806635 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
79:25-79:36::lq_anf$##7205759403792806636 :: "{v : () | len xs == fingerTreeSize (from xs)}"
85:1-85:5::Main.from :: "forall a##xo .\n[a##xo]\n-> (Main.FingerTree a##xo)"
86:15-86:27::Main.<| :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : (Main.FingerTree a##xo) | VV == <| x1 x2}"
86:20-86:27::lq_anf$##7205759403792806530 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
90:1-90:9::Main.lem_from :: "forall a##xo .\nx1:[a##xo]\n-> {VV : () | len x1 == fingerTreeSize (from x1)}"
91:19-91:32::_ :: "x1:(Main.FingerTree a##xo)\n-> {v : () | size to1 (<| x x1) == size to1 x1 + to1 x}"
91:34-91:41::lq_anf$##7205759403792806632 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
91:43-91:46::_ :: "{v : ()\n     -> ()\n        -> () | v == &&&}"
91:47-91:58::lq_anf$##7205759403792806634 :: "{v : () | len xs == fingerTreeSize (from xs)}"
95:1-95:2::a :: "a##xo"
95:3-95:5::Main.<| :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : (Main.FingerTree a##xo) | VV == <| x1 x2}"
96:28-96:40::lq_anf$##7205759403792806515 :: "{v : (Main.Digit a##xo) | lqdc##$select v == a\n                          && digitSize v == 1\n                          && v == One a}"
97:33-97:47::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && (isEmpty v <=> false)}"
97:39-97:44::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
97:49-97:56::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
99:5-99:26::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && (isEmpty v <=> false)}"
99:11-99:22::_ :: "{v : x1:{v : (Main.Digit a##xo) | digitSize v < 4}\n     -> {v : (Main.Digit a##xo) | digitSize v == digitSize x1 + 1\n                                  && v == consDigit a x1} | v == consDigit a}"
106:1-106:10::Main.consDigit :: "forall a##xo .\na##xo\n-> x2:{d : (Main.Digit a##xo) | digitSize d < 4}\n   -> {dd : (Main.Digit a##xo) | digitSize dd == digitSize x2 + 1}"
106:11-106:12::a :: "a##xo"
106:23-106:28::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
107:25-107:32::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Digit a##xo) | lqdc##$select v == x2\n                                && lqdc##$select v == x1\n                                && lqdc##$select v == a\n                                && digitSize v == 3\n                                && v == Three a x1 x2}"
108:29-108:35::_ :: "x1:a##xo\n-> x2:a##xo\n   -> x3:a##xo\n      -> {v : (Main.Digit a##xo) | lqdc##$select v == x3\n                                   && lqdc##$select v == x2\n                                   && lqdc##$select v == x1\n                                   && lqdc##$select v == a\n                                   && digitSize v == 4\n                                   && v == Four a x1 x2 x3}"
112:1-112:12::Main.lem_add_to1 :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : () | size to1 (<| x1 x2) == size to1 x2 + to1 x1}"
112:13-112:14::a :: "a##xo"
112:15-112:16::t :: "(Main.FingerTree a##xo)"
112:19-112:30::lq_anf$##7205759403792806630 :: "{v : x1:a##xo\n     -> {v : GHC.Types.Int | v == to1 x1\n                             && v == 1} | v == to1}"
116:1-116:8::Main.lem_add :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:a##xo\n   -> x4:(Main.FingerTree a##xo)\n      -> {VV : () | size x1 (<| x3 x4) == size x1 x4 + x1 x3}"
116:9-116:10::f :: "a##xo\n-> GHC.Types.Int"
116:11-116:12::a :: "a##xo"
119:5-119:104::lq_anf$##7205759403792806611 :: "GHC.Types.Int"
119:6-119:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
119:10-119:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
119:12-119:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
119:16-119:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
119:18-119:32::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
119:24-119:31::lq_anf$##7205759403792806601 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
119:34-119:41::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
119:52-119:53::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
119:54-119:62::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
119:70-119:87::Main.lem_add :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:a##xo\n   -> x4:(Main.FingerTree a##xo)\n      -> {VV : () | size x1 (<| x3 x4) == size x1 x4 + x1 x3}"
119:79-119:86::lq_anf$##7205759403792806608 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
119:89-119:96::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
120:6-120:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
120:10-120:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
120:12-120:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
120:16-120:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
120:18-120:32::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
120:24-120:31::lq_anf$##7205759403792806615 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
120:35-120:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
120:37-120:44::_ :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
120:46-120:53::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
120:59-120:60::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
120:61-120:69::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
121:29-121:40::_ :: "{v : x1:{v : (Main.Digit a##xo) | digitSize v < 4}\n     -> {v : (Main.Digit a##xo) | digitSize v == digitSize x1 + 1\n                                  && v == consDigit a x1} | v == consDigit a}"
126:1-126:4::Main.ft1 :: "{VV : (Main.FingerTree GHC.Types.Int) | fingerTreeSize VV == 10}"
126:7-126:38::lq_anf$##7205759403792806657 :: "[GHC.Types.Int]"
130:1-130:5:::Main.main :: "(GHC.Types.IO ())"
131:5-131:10::_ :: "[GHC.Types.Char]\n-> (GHC.Types.IO ())"
132:5-132:31::lq_anf$##7205759403792806663 :: "(GHC.Types.IO ())"
132:13-132:31::lq_anf$##7205759403792806662 :: "{v : GHC.Types.Int | v == fingerTreeSize ft1\n                     && v == size to1 ft1}"