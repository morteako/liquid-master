1:1-1:1::Main.$trModule :: "GHC.Types.Module"
13:1-13:10::Main.digitSize :: "forall a##xo .\nx1:(Main.Digit a##xo)\n-> {VV : GHC.Types.Int | VV == digitSize x1}"
36:1-36:6::Main.ftRec :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> {VV : GHC.Types.Int | VV == ftRec x1}"
38:22-38:33::lq_anf$##7205759403792807229 :: "{v : GHC.Types.Int | v == 2}"
38:24-38:25::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
38:26-38:33::lq_anf$##7205759403792807230 :: "{v : GHC.Types.Int | v == ftRec m}"
44:1-44:15::Main.fingerTreeSize :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> {VV : GHC.Types.Int | VV == fingerTreeSize x1\n                         && VV == size to1 x1}"
44:16-44:17::t :: "(Main.FingerTree a##xo)"
44:20-44:28::lq_anf$##7205759403792807095 :: "{v : x1:a##xo\n     -> {v : GHC.Types.Int | v == to1 x1\n                             && v == 1} | v == to1}"
48:1-48:5::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
49:21-49:22::_ :: "a##xo\n-> GHC.Types.Int"
50:23-50:31::_ :: "(Main.Digit a##xo)\n-> GHC.Types.Int"
50:34-50:35::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
50:36-50:50::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
50:42-50:49::lq_anf$##7205759403792807091 :: "(Main.Node a##xo)\n-> GHC.Types.Int"
50:53-50:54::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
50:55-50:63::_ :: "(Main.Digit a##xo)\n-> GHC.Types.Int"
54:1-54:7::Main.digitS :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.Digit a##xo)\n   -> {VV : GHC.Types.Int | VV == digitS x1 x3}"
54:8-54:9::f :: "a##xo\n-> GHC.Types.Int"
54:20-54:21::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
55:22-55:23::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
55:26-55:27::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
55:28-55:29::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
56:26-56:27::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
56:30-56:31::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
56:32-56:33::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
56:36-56:37::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
56:38-56:39::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
57:27-57:28::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
57:31-57:32::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
57:33-57:34::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
57:37-57:38::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
57:39-57:40::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
57:43-57:44::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
57:45-57:46::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
61:1-61:6::Main.nodeS :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.Node a##xo)\n   -> {VV : GHC.Types.Int | VV == nodeS x1 x3}"
61:7-61:8::f :: "a##xo\n-> GHC.Types.Int"
61:25-61:26::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
61:29-61:30::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
61:31-61:32::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
62:25-62:26::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
62:29-62:30::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
62:31-62:32::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
62:35-62:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
62:37-62:38::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
66:1-66:4::Main.to1 :: "forall a##xo .\nx1:a##xo\n-> {VV : GHC.Types.Int | VV == to1 x1\n                         && VV == 1}"
70:1-70:6::Main.empty :: "forall a##xo .\n{VV : (Main.FingerTree a##xo) | fingerTreeSize VV == 0}"
73:1-73:8::Main.isEmpty :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> {VV : GHC.Types.Bool | VV <=> isEmpty x1}"
79:1-79:10::Main.singleton :: "forall a##xo .\na##xo\n-> {VV : (Main.FingerTree a##xo) | fingerTreeSize VV == 1}"
79:11-79:12::a :: "a##xo"
84:1-84:9::Main.fromList :: "forall a##xo .\nx1:[a##xo]\n-> {ft : (Main.FingerTree a##xo) | fingerTreeSize ft == len x1}"
84:10-84:12::xs :: "[a##xo]"
84:15-84:22::lq_anf$##7205759403792807136 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
84:25-84:36::lq_anf$##7205759403792807137 :: "{v : () | len xs == fingerTreeSize (from xs)}"
90:1-90:5::Main.from :: "forall a##xo .\n[a##xo]\n-> (Main.FingerTree a##xo)"
91:15-91:27::Main.<| :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : (Main.FingerTree a##xo) | VV == <| x1 x2}"
91:20-91:27::lq_anf$##7205759403792807008 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
95:1-95:9::Main.lem_from :: "forall a##xo .\nx1:[a##xo]\n-> {VV : () | len x1 == fingerTreeSize (from x1)}"
96:19-96:32::_ :: "x1:(Main.FingerTree a##xo)\n-> {v : () | size to1 (<| x x1) == size to1 x1 + to1 x}"
96:34-96:41::lq_anf$##7205759403792807133 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
96:43-96:46::_ :: "{v : ()\n     -> ()\n        -> () | v == &&&}"
96:47-96:58::lq_anf$##7205759403792807135 :: "{v : () | len xs == fingerTreeSize (from xs)}"
100:1-100:2::a :: "a##xo"
100:3-100:5::Main.<| :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : (Main.FingerTree a##xo) | VV == <| x1 x2}"
101:28-101:40::lq_anf$##7205759403792806993 :: "{v : (Main.Digit a##xo) | lqdc##$select v == a\n                          && digitSize v == 1\n                          && v == One a}"
102:33-102:47::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && (isEmpty v <=> false)\n                                     && ftRec v == 2 + ftRec x1}"
102:39-102:44::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
102:49-102:56::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
104:5-104:26::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && (isEmpty v <=> false)\n                                     && ftRec v == 2 + ftRec x1}"
104:11-104:22::_ :: "{v : x1:{v : (Main.Digit a##xo) | digitSize v < 4}\n     -> {v : (Main.Digit a##xo) | digitSize v == digitSize x1 + 1\n                                  && v == consDigit a x1} | v == consDigit a}"
113:1-113:12::Main.lem_add_to1 :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : () | size to1 (<| x1 x2) == size to1 x2 + to1 x1}"
113:13-113:14::a :: "a##xo"
113:15-113:16::t :: "(Main.FingerTree a##xo)"
113:19-113:30::lq_anf$##7205759403792807131 :: "{v : x1:a##xo\n     -> {v : GHC.Types.Int | v == to1 x1\n                             && v == 1} | v == to1}"
118:1-118:8::Main.lem_add :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:a##xo\n   -> x4:(Main.FingerTree a##xo)\n      -> {VV : () | size x1 (<| x3 x4) == size x1 x4 + x1 x3}"
118:9-118:10::f :: "a##xo\n-> GHC.Types.Int"
118:11-118:12::a :: "a##xo"
121:5-121:104::lq_anf$##7205759403792807112 :: "GHC.Types.Int"
121:6-121:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
121:10-121:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
121:12-121:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
121:16-121:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
121:18-121:32::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
121:24-121:31::lq_anf$##7205759403792807102 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
121:34-121:41::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
121:52-121:53::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
121:54-121:62::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
121:70-121:87::Main.lem_add :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:a##xo\n   -> x4:(Main.FingerTree a##xo)\n      -> {VV : () | size x1 (<| x3 x4) == size x1 x4 + x1 x3}"
121:79-121:86::lq_anf$##7205759403792807109 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
121:89-121:96::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
122:6-122:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
122:10-122:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
122:12-122:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
122:16-122:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
122:18-122:32::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
122:24-122:31::lq_anf$##7205759403792807116 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
122:35-122:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
122:37-122:44::_ :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
122:46-122:53::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
122:59-122:60::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
122:61-122:69::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
123:29-123:40::_ :: "{v : x1:{v : (Main.Digit a##xo) | digitSize v < 4}\n     -> {v : (Main.Digit a##xo) | digitSize v == digitSize x1 + 1\n                                  && v == consDigit a x1} | v == consDigit a}"
130:7-130:9::Main.|> :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:a##xo\n   -> {VV : (Main.FingerTree a##xo) | VV == |> x1 x2}"
130:10-130:11::a :: "a##xo"
131:28-131:40::lq_anf$##7205759403792807016 :: "{v : (Main.Digit a##xo) | lqdc##$select v == a\n                          && digitSize v == 1\n                          && v == One a}"
133:5-133:12::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && lqdc##$select v == pr\n                                     && (isEmpty v <=> false)\n                                     && ftRec v == 2 + ftRec x1\n                                     && v == Deep pr x1 x2}"
133:14-133:30::lq_anf$##7205759403792807022 :: "(Main.FingerTree (Main.Node a##xo))"
133:19-133:26::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
133:33-133:38::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == d\n                             && digitSize v == 2\n                             && v == Two d x1}"
135:5-135:12::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && lqdc##$select v == pr\n                                     && (isEmpty v <=> false)\n                                     && ftRec v == 2 + ftRec x1\n                                     && v == Deep pr x1 x2}"
135:16-135:28::_ :: "a##xo\n-> (Main.Digit a##xo)"
142:1-142:10::Main.consDigit :: "forall a##xo .\na##xo\n-> x2:{d : (Main.Digit a##xo) | digitSize d < 4}\n   -> {dd : (Main.Digit a##xo) | digitSize dd == digitSize x2 + 1}"
142:11-142:12::a :: "a##xo"
142:23-142:28::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
143:25-143:32::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Digit a##xo) | lqdc##$select v == x2\n                                && lqdc##$select v == x1\n                                && lqdc##$select v == a\n                                && digitSize v == 3\n                                && v == Three a x1 x2}"
144:29-144:35::_ :: "x1:a##xo\n-> x2:a##xo\n   -> x3:a##xo\n      -> {v : (Main.Digit a##xo) | lqdc##$select v == x3\n                                   && lqdc##$select v == x2\n                                   && lqdc##$select v == x1\n                                   && lqdc##$select v == a\n                                   && digitSize v == 4\n                                   && v == Four a x1 x2 x3}"
149:1-149:10::Main.snocDigit :: "forall a##xo .\nx1:{d : (Main.Digit a##xo) | digitSize d < 4}\n-> a##xo\n   -> {dd : (Main.Digit a##xo) | digitSize dd == digitSize x1 + 1}"
149:19-149:20::b :: "a##xo"
149:23-149:28::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
150:25-150:32::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Digit a##xo) | lqdc##$select v == x2\n                                && lqdc##$select v == x1\n                                && lqdc##$select v == a\n                                && digitSize v == 3\n                                && v == Three a x1 x2}"
151:29-151:35::_ :: "x1:a##xo\n-> x2:a##xo\n   -> x3:a##xo\n      -> {v : (Main.Digit a##xo) | lqdc##$select v == x3\n                                   && lqdc##$select v == x2\n                                   && lqdc##$select v == x1\n                                   && lqdc##$select v == a\n                                   && digitSize v == 4\n                                   && v == Four a x1 x2 x3}"
155:1-155:14::Main.lem_add_r_to1 :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : () | size to1 (|> x2 x1) == size to1 x2 + to1 x1}"
155:15-155:16::a :: "a##xo"
155:17-155:18::t :: "(Main.FingerTree a##xo)"
155:21-155:34::lq_anf$##7205759403792807200 :: "{v : x1:a##xo\n     -> {v : GHC.Types.Int | v == to1 x1\n                             && v == 1} | v == to1}"
159:1-159:10::Main.lem_add_r :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:a##xo\n   -> x4:(Main.FingerTree a##xo)\n      -> {VV : () | size x1 (|> x4 x3) == size x1 x4 + x1 x3}"
159:11-159:12::f :: "a##xo\n-> GHC.Types.Int"
159:13-159:14::a :: "a##xo"
162:5-162:105::lq_anf$##7205759403792807181 :: "GHC.Types.Int"
162:6-162:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
162:10-162:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
162:12-162:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
162:16-162:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
162:18-162:32::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
162:24-162:31::lq_anf$##7205759403792807171 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
162:34-162:50::lq_anf$##7205759403792807173 :: "(Main.FingerTree (Main.Node a##xo))"
162:39-162:46::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
162:52-162:53::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
162:54-162:62::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
162:69-162:88::Main.lem_add_r :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:a##xo\n   -> x4:(Main.FingerTree a##xo)\n      -> {VV : () | size x1 (|> x4 x3) == size x1 x4 + x1 x3}"
162:80-162:87::lq_anf$##7205759403792807178 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
162:90-162:97::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
163:6-163:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
163:10-163:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
163:12-163:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
163:16-163:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
163:18-163:32::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
163:24-163:31::lq_anf$##7205759403792807185 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
163:35-163:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
163:37-163:44::_ :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
163:46-163:53::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
163:59-163:60::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
163:61-163:69::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
164:30-164:41::_ :: "a##xo\n-> (Main.Digit a##xo)"
169:1-169:10::Main.fromListR :: "forall a##xo .\nx1:[a##xo]\n-> {ft : (Main.FingerTree a##xo) | fingerTreeSize ft == len x1}"
169:11-169:13::xs :: "[a##xo]"
169:16-169:24::lq_anf$##7205759403792807205 :: "{v : (Main.FingerTree a##xo) | v == fromR xs}"
169:27-169:40::lq_anf$##7205759403792807206 :: "{v : () | len xs == fingerTreeSize (fromR xs)}"
175:1-175:6::Main.fromR :: "forall a##xo .\n[a##xo]\n-> (Main.FingerTree a##xo)"
176:16-176:24::lq_anf$##7205759403792807031 :: "{v : (Main.FingerTree a##xo) | v == fromR xs}"
180:1-180:11::Main.lem_from_r :: "forall a##xo .\nx1:[a##xo]\n-> {VV : () | len x1 == fingerTreeSize (fromR x1)}"
181:21-181:36::_ :: "x1:(Main.FingerTree a##xo)\n-> {v : () | size to1 (|> x1 x) == size to1 x1 + to1 x}"
181:38-181:46::lq_anf$##7205759403792807202 :: "{v : (Main.FingerTree a##xo) | v == fromR xs}"
181:48-181:51::_ :: "{v : ()\n     -> ()\n        -> () | v == &&&}"
181:52-181:65::lq_anf$##7205759403792807204 :: "{v : () | len xs == fingerTreeSize (fromR xs)}"
185:1-185:4::Main.ft1 :: "{VV : (Main.FingerTree GHC.Types.Int) | fingerTreeSize VV == 10}"
185:7-185:38::lq_anf$##7205759403792807158 :: "[GHC.Types.Int]"
189:1-189:4::Main.ft2 :: "{VV : (Main.FingerTree GHC.Types.Int) | fingerTreeSize VV == 10}"
189:7-189:39::lq_anf$##7205759403792807227 :: "[GHC.Types.Int]"
194:1-194:5:::Main.main :: "(GHC.Types.IO ())"
195:5-195:10::_ :: "[GHC.Types.Char]\n-> (GHC.Types.IO ())"
196:5-196:31::lq_anf$##7205759403792807164 :: "(GHC.Types.IO ())"
196:13-196:31::lq_anf$##7205759403792807163 :: "{v : GHC.Types.Int | v == fingerTreeSize ft1\n                     && v == size to1 ft1}"