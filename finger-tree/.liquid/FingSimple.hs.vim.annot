1:1-1:1::Main.$trModule :: "GHC.Types.Module"
13:1-13:10::Main.digitSize :: "forall a##xo .\nx1:(Main.Digit a##xo)\n-> {VV : GHC.Types.Int | VV == digitSize x1}"
41:1-41:15::Main.fingerTreeSize :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> {VV : GHC.Types.Int | VV == fingerTreeSize x1\n                         && VV == size to1 x1}"
41:16-41:17::t :: "(Main.FingerTree a##xo)"
41:20-41:28::lq_anf$##7205759403792807055 :: "{v : x1:a##xo\n     -> {v : GHC.Types.Int | v == to1 x1\n                             && v == 1} | v == to1}"
45:1-45:5::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
46:21-46:22::_ :: "a##xo\n-> GHC.Types.Int"
47:23-47:31::_ :: "(Main.Digit a##xo)\n-> GHC.Types.Int"
47:34-47:35::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
47:36-47:50::Main.size :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.FingerTree a##xo)\n   -> {VV : GHC.Types.Int | VV == size x1 x3}"
47:42-47:49::lq_anf$##7205759403792807051 :: "(Main.Node a##xo)\n-> GHC.Types.Int"
47:53-47:54::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
47:55-47:63::_ :: "(Main.Digit a##xo)\n-> GHC.Types.Int"
51:1-51:7::Main.digitS :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.Digit a##xo)\n   -> {VV : GHC.Types.Int | VV == digitS x1 x3}"
51:8-51:9::f :: "a##xo\n-> GHC.Types.Int"
51:20-51:21::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
52:22-52:23::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
52:26-52:27::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
52:28-52:29::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
53:26-53:27::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
53:30-53:31::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
53:32-53:33::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
53:36-53:37::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
53:38-53:39::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
54:27-54:28::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
54:31-54:32::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
54:33-54:34::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
54:37-54:38::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
54:39-54:40::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
54:43-54:44::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
54:45-54:46::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
58:1-58:6::Main.nodeS :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:(Main.Node a##xo)\n   -> {VV : GHC.Types.Int | VV == nodeS x1 x3}"
58:7-58:8::f :: "a##xo\n-> GHC.Types.Int"
58:25-58:26::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
58:29-58:30::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
58:31-58:32::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
59:25-59:26::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
59:29-59:30::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
59:31-59:32::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
59:35-59:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
59:37-59:38::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
63:1-63:4::Main.to1 :: "forall a##xo .\nx1:a##xo\n-> {VV : GHC.Types.Int | VV == to1 x1\n                         && VV == 1}"
67:1-67:6::Main.empty :: "forall a##xo .\n{VV : (Main.FingerTree a##xo) | fingerTreeSize VV == 0}"
70:1-70:8::Main.isEmpty :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> {VV : GHC.Types.Bool | VV <=> isEmpty x1}"
76:1-76:10::Main.singleton :: "forall a##xo .\na##xo\n-> {VV : (Main.FingerTree a##xo) | fingerTreeSize VV == 1}"
76:11-76:12::a :: "a##xo"
81:1-81:9::Main.fromList :: "forall a##xo .\nx1:[a##xo]\n-> {ft : (Main.FingerTree a##xo) | fingerTreeSize ft == len x1}"
81:10-81:12::xs :: "[a##xo]"
81:15-81:22::lq_anf$##7205759403792807107 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
81:25-81:36::lq_anf$##7205759403792807108 :: "{v : () | len xs == fingerTreeSize (from xs)}"
87:1-87:5::Main.from :: "forall a##xo .\n[a##xo]\n-> (Main.FingerTree a##xo)"
88:15-88:27::x :: "{VV : a##xo | VV == x}"
88:20-88:27::lq_anf$##7205759403792806968 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
92:1-92:9::Main.lem_from :: "forall a##xo .\nx1:[a##xo]\n-> {VV : () | len x1 == fingerTreeSize (from x1)}"
93:19-93:32::_ :: "x1:(Main.FingerTree a##xo)\n-> {v : () | size to1 (<| x x1) == size to1 x1 + to1 x}"
93:34-93:41::lq_anf$##7205759403792807104 :: "{v : (Main.FingerTree a##xo) | v == from xs}"
93:43-93:46::_ :: "{v : ()\n     -> ()\n        -> () | v == &&&}"
93:47-93:58::lq_anf$##7205759403792807106 :: "{v : () | len xs == fingerTreeSize (from xs)}"
97:1-97:2::a :: "a##xo"
97:3-97:5::Main.<| :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : (Main.FingerTree a##xo) | VV == <| x1 x2}"
98:28-98:40::lq_anf$##7205759403792806953 :: "{v : (Main.Digit a##xo) | lqdc##$select v == a\n                          && digitSize v == 1\n                          && v == One a}"
99:33-99:47::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && (isEmpty v <=> false)}"
99:39-99:44::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
99:49-99:56::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
101:5-101:26::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && (isEmpty v <=> false)}"
101:11-101:22::_ :: "{v : x1:{v : (Main.Digit a##xo) | digitSize v < 4}\n     -> {v : (Main.Digit a##xo) | digitSize v == digitSize x1 + 1\n                                  && v == consDigit a x1} | v == consDigit a}"
110:1-110:12::Main.lem_add_to1 :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : () | size to1 (<| x1 x2) == size to1 x2 + to1 x1}"
110:13-110:14::a :: "a##xo"
110:15-110:16::t :: "(Main.FingerTree a##xo)"
110:19-110:28::Main.lem_add :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:(a##xo\n       -> GHC.Types.Int)\n   -> x4:a##xo\n      -> {VV : () | size x2 (<| x4 x1) == size x2 x1 + x2 x4}"
114:1-114:8::Main.lem_add :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:(a##xo\n       -> GHC.Types.Int)\n   -> x4:a##xo\n      -> {VV : () | size x2 (<| x4 x1) == size x2 x1 + x2 x4}"
114:15-114:16::f :: "a##xo\n-> GHC.Types.Int"
114:17-114:18::a :: "a##xo"
117:6-117:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
117:10-117:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
117:12-117:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
117:16-117:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
117:18-117:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
117:24-117:31::lq_anf$##7205759403792807062 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
117:34-117:41::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
117:52-117:53::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
117:54-117:62::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
118:6-118:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
118:10-118:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
118:12-118:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
118:16-118:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
118:18-118:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
118:24-118:31::lq_anf$##7205759403792807072 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
118:34-118:41::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
118:52-118:53::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
118:54-118:62::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
118:70-118:79::Main.lem_add :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:(a##xo\n       -> GHC.Types.Int)\n   -> x4:a##xo\n      -> {VV : () | size x2 (<| x4 x1) == size x2 x1 + x2 x4}"
118:81-118:88::lq_anf$##7205759403792807080 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
118:91-118:98::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
119:6-119:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
119:10-119:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
119:12-119:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
119:16-119:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
119:18-119:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
119:24-119:31::lq_anf$##7205759403792807087 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
119:35-119:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
119:37-119:44::_ :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
119:46-119:53::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == c\n                               && v == Node3 c x1 x2}"
119:59-119:60::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
119:61-119:69::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
120:30-120:41::_ :: "{v : x1:{v : (Main.Digit a##xo) | digitSize v < 4}\n     -> {v : (Main.Digit a##xo) | digitSize v == digitSize x1 + 1\n                                  && v == consDigit a x1} | v == consDigit a}"
124:7-124:9::Main.|> :: "forall a##xo .\nx1:(Main.FingerTree a##xo)\n-> x2:a##xo\n   -> {VV : (Main.FingerTree a##xo) | VV == |> x1 x2}"
124:10-124:11::a :: "a##xo"
125:28-125:40::lq_anf$##7205759403792806976 :: "{v : (Main.Digit a##xo) | lqdc##$select v == a\n                          && digitSize v == 1\n                          && v == One a}"
127:5-127:12::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && lqdc##$select v == pr\n                                     && (isEmpty v <=> false)\n                                     && v == Deep pr x1 x2}"
127:14-127:30::lq_anf$##7205759403792806982 :: "(Main.FingerTree (Main.Node a##xo))"
127:19-127:26::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
127:33-127:38::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == d\n                             && digitSize v == 2\n                             && v == Two d x1}"
129:5-129:12::_ :: "x1:(Main.FingerTree (Main.Node a##xo))\n-> x2:(Main.Digit a##xo)\n   -> {v : (Main.FingerTree a##xo) | lqdc##$select v == x2\n                                     && lqdc##$select v == x1\n                                     && lqdc##$select v == pr\n                                     && (isEmpty v <=> false)\n                                     && v == Deep pr x1 x2}"
129:16-129:28::_ :: "a##xo\n-> (Main.Digit a##xo)"
136:1-136:10::Main.consDigit :: "forall a##xo .\na##xo\n-> x2:{d : (Main.Digit a##xo) | digitSize d < 4}\n   -> {dd : (Main.Digit a##xo) | digitSize dd == digitSize x2 + 1}"
136:11-136:12::a :: "a##xo"
136:23-136:28::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
137:25-137:32::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Digit a##xo) | lqdc##$select v == x2\n                                && lqdc##$select v == x1\n                                && lqdc##$select v == a\n                                && digitSize v == 3\n                                && v == Three a x1 x2}"
138:29-138:35::_ :: "x1:a##xo\n-> x2:a##xo\n   -> x3:a##xo\n      -> {v : (Main.Digit a##xo) | lqdc##$select v == x3\n                                   && lqdc##$select v == x2\n                                   && lqdc##$select v == x1\n                                   && lqdc##$select v == a\n                                   && digitSize v == 4\n                                   && v == Four a x1 x2 x3}"
143:1-143:10::Main.snocDigit :: "forall a##xo .\nx1:{d : (Main.Digit a##xo) | digitSize d < 4}\n-> a##xo\n   -> {dd : (Main.Digit a##xo) | digitSize dd == digitSize x1 + 1}"
143:19-143:20::b :: "a##xo"
143:23-143:28::_ :: "x1:a##xo\n-> {v : (Main.Digit a##xo) | lqdc##$select v == x1\n                             && lqdc##$select v == a\n                             && digitSize v == 2\n                             && v == Two a x1}"
144:25-144:32::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Digit a##xo) | lqdc##$select v == x2\n                                && lqdc##$select v == x1\n                                && lqdc##$select v == a\n                                && digitSize v == 3\n                                && v == Three a x1 x2}"
145:29-145:35::_ :: "x1:a##xo\n-> x2:a##xo\n   -> x3:a##xo\n      -> {v : (Main.Digit a##xo) | lqdc##$select v == x3\n                                   && lqdc##$select v == x2\n                                   && lqdc##$select v == x1\n                                   && lqdc##$select v == a\n                                   && digitSize v == 4\n                                   && v == Four a x1 x2 x3}"
149:1-149:14::Main.lem_add_r_to1 :: "forall a##xo .\nx1:a##xo\n-> x2:(Main.FingerTree a##xo)\n   -> {VV : () | size to1 (|> x2 x1) == size to1 x2 + to1 x1}"
149:15-149:16::a :: "a##xo"
149:17-149:18::t :: "(Main.FingerTree a##xo)"
149:21-149:34::lq_anf$##7205759403792807171 :: "{v : x1:a##xo\n     -> {v : GHC.Types.Int | v == to1 x1\n                             && v == 1} | v == to1}"
154:1-154:10::Main.lem_add_r :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:a##xo\n   -> x4:(Main.FingerTree a##xo)\n      -> {VV : () | size x1 (|> x4 x3) == size x1 x4 + x1 x3}"
154:11-154:12::f :: "a##xo\n-> GHC.Types.Int"
154:13-154:14::a :: "a##xo"
157:5-157:105::lq_anf$##7205759403792807152 :: "GHC.Types.Int"
157:6-157:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
157:10-157:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
157:12-157:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
157:16-157:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
157:18-157:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
157:24-157:31::lq_anf$##7205759403792807142 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
157:34-157:50::lq_anf$##7205759403792807144 :: "(Main.FingerTree (Main.Node a##xo))"
157:39-157:46::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
157:52-157:53::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
157:54-157:62::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
157:69-157:88::Main.lem_add_r :: "forall a##xo .\nx1:(a##xo\n    -> GHC.Types.Int)\n-> x3:a##xo\n   -> x4:(Main.FingerTree a##xo)\n      -> {VV : () | size x1 (|> x4 x3) == size x1 x4 + x1 x3}"
157:80-157:87::lq_anf$##7205759403792807149 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
157:90-157:97::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
158:6-158:7::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
158:10-158:11::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
158:12-158:13::_ :: "{v : a##xo\n     -> GHC.Types.Int | v == f}"
158:16-158:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
158:18-158:32::_ :: "(Main.FingerTree (Main.Node a##xo))\n-> GHC.Types.Int"
158:24-158:31::lq_anf$##7205759403792807156 :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
158:35-158:36::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
158:37-158:44::_ :: "{v : x1:(Main.Node a##xo)\n     -> {v : GHC.Types.Int | v == nodeS f x1} | v == nodeS f}"
158:46-158:53::_ :: "x1:a##xo\n-> x2:a##xo\n   -> {v : (Main.Node a##xo) | lqdc##$select v == x2\n                               && lqdc##$select v == x1\n                               && lqdc##$select v == a\n                               && v == Node3 a x1 x2}"
158:59-158:60::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n   -> {v : GHC.Types.Int | v == x1 + x2}"
158:61-158:69::_ :: "{v : x1:(Main.Digit a##xo)\n     -> {v : GHC.Types.Int | v == digitS f x1} | v == digitS f}"
159:30-159:41::_ :: "a##xo\n-> (Main.Digit a##xo)"
164:1-164:10::Main.fromListR :: "forall a##xo .\nx1:[a##xo]\n-> {ft : (Main.FingerTree a##xo) | fingerTreeSize ft == len x1}"
164:11-164:13::xs :: "[a##xo]"
164:16-164:24::lq_anf$##7205759403792807176 :: "{v : (Main.FingerTree a##xo) | v == fromR xs}"
164:27-164:40::lq_anf$##7205759403792807177 :: "{v : () | len xs == fingerTreeSize (fromR xs)}"
170:1-170:6::Main.fromR :: "forall a##xo .\n[a##xo]\n-> (Main.FingerTree a##xo)"
171:16-171:24::lq_anf$##7205759403792806991 :: "{v : (Main.FingerTree a##xo) | v == fromR xs}"
175:1-175:11::Main.lem_from_r :: "forall a##xo .\nx1:[a##xo]\n-> {VV : () | len x1 == fingerTreeSize (fromR x1)}"
176:21-176:36::_ :: "x1:(Main.FingerTree a##xo)\n-> {v : () | size to1 (|> x1 x) == size to1 x1 + to1 x}"
176:38-176:46::lq_anf$##7205759403792807173 :: "{v : (Main.FingerTree a##xo) | v == fromR xs}"
176:48-176:51::_ :: "{v : ()\n     -> ()\n        -> () | v == &&&}"
176:52-176:65::lq_anf$##7205759403792807175 :: "{v : () | len xs == fingerTreeSize (fromR xs)}"
180:1-180:4::Main.ft1 :: "{VV : (Main.FingerTree GHC.Types.Int) | fingerTreeSize VV == 10}"
180:7-180:38::lq_anf$##7205759403792807129 :: "[GHC.Types.Int]"
184:1-184:4::Main.ft2 :: "{VV : (Main.FingerTree GHC.Types.Int) | fingerTreeSize VV == 10}"
184:7-184:39::lq_anf$##7205759403792807198 :: "[GHC.Types.Int]"
189:1-189:5:::Main.main :: "(GHC.Types.IO ())"
190:5-190:10::_ :: "[GHC.Types.Char]\n-> (GHC.Types.IO ())"
191:5-191:31::lq_anf$##7205759403792807135 :: "(GHC.Types.IO ())"
191:13-191:31::lq_anf$##7205759403792807134 :: "{v : GHC.Types.Int | v == fingerTreeSize ft1\n                     && v == size to1 ft1}"