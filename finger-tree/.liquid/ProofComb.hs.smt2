(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort Set () (Array Elt Bool))
(define-fun smt_set_emp () Set ((as const Set) false))
(define-fun smt_set_mem ((x Elt) (s Set)) Bool (select s x))
(define-fun smt_set_add ((s Set) (x Elt)) Set (store s x true))
(define-fun smt_set_cup ((s1 Set) (s2 Set)) Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 Set) (s2 Set)) Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s Set)) Set ((_ map not) s))
(define-fun smt_set_dif ((s1 Set) (s2 Set)) Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 Set) (s2 Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun ds_d2tn () Int)
(declare-fun VV$35$$35$1317 () Int)
(declare-fun VV$35$$35$1498 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lq_tmp$36$x$35$$35$1130 () Int)
(declare-fun VV$35$$35$1508 () Int)
(declare-fun addrLen () Int)
(declare-fun x$35$$35$asv () Int)
(declare-fun ProofComb.Admit () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803146$35$$35$d2tY () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun VV$35$$35$F$35$$35$13 () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun ProofComb.withProof () Int)
(declare-fun ProofComb.$61$$61$. () Int)
(declare-fun lq_tmp$36$x$35$$35$1144 () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun ds_d2te () Int)
(declare-fun ProofComb.$38$$38$$38$ () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun VV$35$$35$1226 () Int)
(declare-fun lq_tmp$36$x$35$$35$725 () Int)
(declare-fun lit$36$$39$Admit () Str)
(declare-fun ds_d2t5 () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun ds_d2t8 () Int)
(declare-fun VV$35$$35$1416 () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun papp3 () Int)
(declare-fun VV$35$$35$F$35$$35$15 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_tmp$36$x$35$$35$713 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun ds_d2th () Int)
(declare-fun ds_d2tx () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_tmp$36$x$35$$35$926 () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lit$36$C$58$$92$Users$92$MortenAske$92$Dropbox$92$master$92$finger$45$tree$92$ProofComb.hs () Str)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun x$35$$35$asw () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803157$35$$35$d2u9 () Int)
(declare-fun VV$35$$35$F$35$$35$12 () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun VV$35$$35$1682 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Stack.Types.SrcLoc () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun VV$35$$35$1387 () Int)
(declare-fun ProofComb.$61$$60$$61$ () Int)
(declare-fun ds_d2tb () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun y$35$$35$ass () Int)
(declare-fun GHC.Real.C$58$Fractional () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803144$35$$35$d2tW () Int)
(declare-fun head () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun ProofComb.$42$$42$$42$ () Int)
(declare-fun GHC.Err.undefined () Int)
(declare-fun VV$35$$35$1648 () Int)
(declare-fun papp2 () Int)
(declare-fun VV$35$$35$F$35$$35$14 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun ProofComb.toProof () Int)
(declare-fun GHC.Stack.Types.emptyCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$988 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun lit$36$main () Str)
(declare-fun GHC.List.filter () Int)
(declare-fun lq_tmp$36$x$35$$35$889 () Int)
(declare-fun lq_tmp$36$x$35$$35$753 () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun VV$35$$35$1250 () Int)
(declare-fun lq_tmp$36$x$35$$35$890 () Int)
(declare-fun ProofComb.$63$ () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun VV$35$$35$1429 () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun VV$35$$35$1412 () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun x$35$$35$ast () Int)
(declare-fun papp7 () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun VV$35$$35$1505 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803154$35$$35$d2u6 () Int)
(declare-fun lq_tmp$36$x$35$$35$934 () Int)
(declare-fun lq_tmp$36$x$35$$35$691 () Int)
(declare-fun VV$35$$35$1293 () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803150$35$$35$d2u2 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lq_tmp$36$x$35$$35$767 () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$701 () Int)
(declare-fun pa () Int)
(declare-fun y$35$$35$asr () Int)
(declare-fun fldList () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun VV$35$$35$1665 () Int)
(declare-fun GHC.Base.Nothing () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun ProofComb.$61$$61$$61$ () Int)
(declare-fun VV$35$$35$1489 () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun ProofComb.trivial () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun lit$36$undefined () Str)
(declare-fun lq_tmp$36$x$35$$35$888 () Int)
(declare-fun ProofComb.$61$$62$$61$ () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun VV$35$$35$1655 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun isAdmit () Int)
(declare-fun lit$36$$39$QED () Str)
(declare-fun lq_tmp$36$x$35$$35$739 () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803148$35$$35$d2u0 () Int)
(declare-fun lit$36$ProofComb () Str)
(declare-fun pb () Int)
(declare-fun y$35$$35$asq () Int)
(declare-fun isJust () Int)
(declare-fun VV$35$$35$1425 () Int)
(declare-fun x$35$$35$asx () Int)
(declare-fun VV$35$$35$1391 () Int)
(declare-fun VV$35$$35$1658 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Stack.Types.pushCallStack () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun lit$36$QED () Str)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun ds_d2tw () Int)
(declare-fun fix$36$$36$dIP_a2gg () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun prop () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun ProofComb.unreachable () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803152$35$$35$d2u4 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun VV$35$$35$1515 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun ProofComb.$61$$61$$33$ () Int)
(declare-fun ProofComb.impossible () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun VV$35$$35$1274 () Int)
(declare-fun lq_tmp$36$x$35$$35$777 () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803159$35$$35$d2ub () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun VV$35$$35$1442 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun ds_d2tq () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun ds_d2tt () Int)
(declare-fun lq_tmp$36$x$35$$35$760 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun y$35$$35$asu () Int)
(declare-fun VV$35$$35$1438 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun ds_d2tD () Int)
(declare-fun GHC.List.head () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun ProofComb.QED () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun GHC.Real.C$58$Integral () Int)
(declare-fun GHC.Base.Just () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun ds_d2tk () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)

(assert (distinct lit$36$QED lit$36$ProofComb lit$36$$39$QED lit$36$undefined lit$36$main lit$36$C$58$$92$Users$92$MortenAske$92$Dropbox$92$master$92$finger$45$tree$92$ProofComb.hs lit$36$$39$Admit))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct ProofComb.QED ProofComb.Admit))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$$39$Admit) 6))
(assert (= (strLen lit$36$C$58$$92$Users$92$MortenAske$92$Dropbox$92$master$92$finger$45$tree$92$ProofComb.hs) 59))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$undefined) 9))
(assert (= (strLen lit$36$$39$QED) 4))
(assert (= (strLen lit$36$ProofComb) 9))
(assert (= (strLen lit$36$QED) 3))
(push 1)
(assert (and (= VV$35$$35$F$35$$35$11 x$35$$35$asx) (not GHC.Types.False) GHC.Types.True))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$11 x$35$$35$asx)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) pa) VV$35$$35$F$35$$35$12) (= VV$35$$35$F$35$$35$12 x$35$$35$ast)) (not GHC.Types.False) (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) pa) x$35$$35$ast) (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) pb) ds_d2tk) GHC.Types.True))
(push 1)
(assert (not (apply$35$$35$1 (apply$35$$35$0 (as papp1 Int) pa) VV$35$$35$F$35$$35$12)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (>= ds_d2tn y$35$$35$ass) (and (>= ds_d2tn VV$35$$35$F$35$$35$13) (= VV$35$$35$F$35$$35$13 y$35$$35$ass)) (not GHC.Types.False) GHC.Types.True))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$13 y$35$$35$ass)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (<= ds_d2tq y$35$$35$asr) (not GHC.Types.False) (and (<= ds_d2tq VV$35$$35$F$35$$35$14) (= VV$35$$35$F$35$$35$14 y$35$$35$asr)) GHC.Types.True))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$14 y$35$$35$asr)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (= y$35$$35$asq ds_d2tt) (not GHC.Types.False) (and (= VV$35$$35$F$35$$35$15 ds_d2tt) (= VV$35$$35$F$35$$35$15 y$35$$35$asq)) GHC.Types.True))
(push 1)
(assert (not (and (= VV$35$$35$F$35$$35$15 ds_d2tt) (= VV$35$$35$F$35$$35$15 y$35$$35$asq))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(exit)
