{"o_vars":null,"o_types":[[{"spanInfo":{"startLine":47,"endLine":47,"endCol":8,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.toProof","forall a##xo .\na##xo\n-> ()"]]],[{"spanInfo":{"startLine":111,"endLine":111,"endCol":8,"startCol":7,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["y","a##xo"]]],[{"spanInfo":{"startLine":170,"endLine":170,"endCol":10,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.withProof","forall a##xo b##xo .\nx1:a##xo\n-> b##xo\n   -> {VV : a##xo | VV == x1}"]]],[{"spanInfo":{"startLine":1,"endLine":1,"endCol":1,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.$trModule","GHC.Types.Module"]]],[{"spanInfo":{"startLine":106,"endLine":106,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.=<=","forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | x1 <= VV}\n   -> {VV : a##xo | VV == x2}"]]],[{"spanInfo":{"startLine":106,"endLine":106,"endCol":8,"startCol":7,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["y","a##xo"]]],[{"spanInfo":{"startLine":122,"endLine":122,"endCol":4,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.?","forall a##xo b##xo <pa :: a##xo -> Bool, pb :: b##xo -> Bool> .\n{VV : a##xo<pa> | true}\n-> {VV : b##xo<pb> | true}\n   -> {VV : a##xo<pa> | true}"]]],[{"spanInfo":{"startLine":170,"endLine":170,"endCol":12,"startCol":11,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["x","a##xo"]]],[{"spanInfo":{"startLine":111,"endLine":111,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.=>=","forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | x1 >= VV}\n   -> {VV : a##xo | VV == x2}"]]],[{"spanInfo":{"startLine":158,"endLine":158,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.==.","forall a##xo .\na##xo\n-> a##xo\n   -> a##xo"]]],[{"spanInfo":{"startLine":158,"endLine":158,"endCol":8,"startCol":7,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["x","a##xo"]]],[{"spanInfo":{"startLine":134,"endLine":134,"endCol":6,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.==!","forall a##xo .\nx1:a##xo\n-> x2:a##xo\n   -> {VV : a##xo | VV == x1\n                    && VV == x2}"]]],[{"spanInfo":{"startLine":174,"endLine":174,"endCol":25,"startCol":16,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["$dIP_a2gg","{v : (GHC.Classes.IP [GHC.Types.Char] GHC.Stack.Types.CallStack) | v == $dIP_a2gg}"]]],[{"spanInfo":{"startLine":72,"endLine":72,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.***","forall a##xo .\na##xo\n-> x2:Liquid.Haskell.ProofCombinators.QED\n   -> {VV : () | (isAdmit x2 => false)\n                 && (not (isAdmit x2) => true)}"]]],[{"spanInfo":{"startLine":122,"endLine":122,"endCol":2,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["x","{VV : a##xo | papp1 pa VV}"]]],[{"spanInfo":{"startLine":101,"endLine":101,"endCol":8,"startCol":7,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["y","a##xo"]]],[{"spanInfo":{"startLine":165,"endLine":165,"endCol":2,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["x","()"]]],[{"spanInfo":{"startLine":101,"endLine":101,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.===","forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | VV == x1}\n   -> {VV : a##xo | VV == x1\n                    && VV == x2}"]]],[{"spanInfo":{"startLine":165,"endLine":165,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.&&&","()\n-> ()\n   -> ()"]]],[{"spanInfo":{"startLine":174,"endLine":174,"endCol":11,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.impossible","forall a##xo b##xo .\n{VV : a##xo | false}\n-> b##xo"]]],[{"spanInfo":{"startLine":60,"endLine":60,"endCol":12,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.unreachable","()"]]],[{"spanInfo":{"startLine":134,"endLine":134,"endCol":10,"startCol":9,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["y","a##xo"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":8,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.trivial","()"]]]],"o_templs":[[{"spanInfo":{"startLine":47,"endLine":47,"endCol":8,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.toProof","forall a##a2gD .\nlq_tmp$x##673:a##a2gD\n-> ()"]]],[{"spanInfo":{"startLine":111,"endLine":111,"endCol":8,"startCol":7,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["y","{VV : a##a2gt | ds_d2tn >= VV}"]]],[{"spanInfo":{"startLine":170,"endLine":170,"endCol":10,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.withProof","forall a##a2gi b##a2gj .\nlq_tmp$x##769:a##a2gi\n-> lq_tmp$x##770:b##a2gj\n   -> {VV : a##a2gi | VV == lq_tmp$x##769}"]]],[{"spanInfo":{"startLine":1,"endLine":1,"endCol":1,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.$trModule","{VV##1049 : GHC.Types.Module^\"lq_tmp$x##1051\" | $k_##1050}"]]],[{"spanInfo":{"startLine":106,"endLine":106,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.=<=","forall a##a2gv .\nlq_tmp$x##705:a##a2gv\n-> lq_tmp$x##706:{VV : a##a2gv | lq_tmp$x##705 <= VV}\n   -> {VV : a##a2gv | VV == lq_tmp$x##706}"]]],[{"spanInfo":{"startLine":106,"endLine":106,"endCol":8,"startCol":7,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["y","{VV : a##a2gv | ds_d2tq <= VV}"]]],[{"spanInfo":{"startLine":122,"endLine":122,"endCol":4,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.?","forall a##a2gq\n       b##a2gr <pa :: a##a2gq -> Bool, pb :: b##a2gr -> Bool> .\nlq_tmp$x##729:{VV : a##a2gq<pa> | true}\n-> lq_tmp$x##730:{VV : b##a2gr<pb> | true}\n   -> {VV : a##a2gq<pa> | true}"]]],[{"spanInfo":{"startLine":170,"endLine":170,"endCol":12,"startCol":11,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["x","a##a2gi"]]],[{"spanInfo":{"startLine":111,"endLine":111,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.=>=","forall a##a2gt .\nlq_tmp$x##717:a##a2gt\n-> lq_tmp$x##718:{VV : a##a2gt | lq_tmp$x##717 >= VV}\n   -> {VV : a##a2gt | VV == lq_tmp$x##718}"]]],[{"spanInfo":{"startLine":158,"endLine":158,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.==.","forall a##a2gm .\nlq_tmp$x##755:a##a2gm\n-> lq_tmp$x##756:a##a2gm\n   -> a##a2gm"]]],[{"spanInfo":{"startLine":158,"endLine":158,"endCol":8,"startCol":7,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["x","a##a2gm"]]],[{"spanInfo":{"startLine":134,"endLine":134,"endCol":6,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.==!","forall a##xo .\nlq_tmp$x##743:a##xo\n-> lq_tmp$x##744:a##xo\n   -> {v : a##xo | v == lq_tmp$x##743\n                   && v == lq_tmp$x##744}"]]],[{"spanInfo":{"startLine":174,"endLine":174,"endCol":25,"startCol":16,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["$dIP_a2gg","{lq_tmp$x##1044 : (GHC.Classes.IP [GHC.Types.Char] GHC.Stack.Types.CallStack) | lq_tmp$x##1044 == $dIP_a2gg}"]]],[{"spanInfo":{"startLine":72,"endLine":72,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.***","forall a##xo .\nlq_tmp$x##681:a##xo\n-> lq_tmp$x##682:Liquid.Haskell.ProofCombinators.QED\n   -> {VV : () | (isAdmit lq_tmp$x##682 => false)\n                 && (not (isAdmit lq_tmp$x##682) => true)}"]]],[{"spanInfo":{"startLine":122,"endLine":122,"endCol":2,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["x","{VV : a##a2gq | papp1 pa VV}"]]],[{"spanInfo":{"startLine":101,"endLine":101,"endCol":8,"startCol":7,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["y","{VV : a##a2gx | VV == ds_d2tt}"]]],[{"spanInfo":{"startLine":165,"endLine":165,"endCol":2,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["x","()"]]],[{"spanInfo":{"startLine":101,"endLine":101,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.===","forall a##a2gx .\nlq_tmp$x##693:a##a2gx\n-> lq_tmp$x##694:{VV : a##a2gx | VV == lq_tmp$x##693}\n   -> {VV : a##a2gx | VV == lq_tmp$x##693\n                      && VV == lq_tmp$x##694}"]]],[{"spanInfo":{"startLine":165,"endLine":165,"endCol":6,"startCol":3,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.&&&","lq_tmp$x##762:()\n-> lq_tmp$x##763:()\n   -> ()"]]],[{"spanInfo":{"startLine":174,"endLine":174,"endCol":11,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.impossible","forall a##aK8 b##aK9 .\nlq_tmp$x##781:{VV : a##aK8 | false}\n-> b##aK9"]]],[{"spanInfo":{"startLine":60,"endLine":60,"endCol":12,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.unreachable","()"]]],[{"spanInfo":{"startLine":134,"endLine":134,"endCol":10,"startCol":9,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["y","a##a2go"]]],[{"spanInfo":{"startLine":56,"endLine":56,"endCol":8,"startCol":1,"filename":"C:\\Users\\MortenAske\\Dropbox\\master\\liquid-master\\finger-tree\\Liquid\\Haskell\\ProofCombinators.hs"},"realSpan":true},[["Liquid.Haskell.ProofCombinators.trivial","()"]]]],"o_bots":[],"o_result":{"tag":"Safe"}}