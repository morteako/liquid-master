{"status":"safe","types":{"106":{"7":{"ann":"a##xo","ident":"y","row":106,"col":7},"3":{"ann":"forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | x1 <= VV}\n   -> {VV : a##xo | VV == x2}","ident":"Liquid.Haskell.ProofCombinators.=<=","row":106,"col":3}},"174":{"1":{"ann":"forall a##xo b##xo .\n{VV : a##xo | false}\n-> b##xo","ident":"Liquid.Haskell.ProofCombinators.impossible","row":174,"col":1},"16":{"ann":"{v : (GHC.Classes.IP [GHC.Types.Char] GHC.Stack.Types.CallStack) | v == $dIP_a2gg}","ident":"$dIP_a2gg","row":174,"col":16}},"72":{"3":{"ann":"forall a##xo .\na##xo\n-> x2:Liquid.Haskell.ProofCombinators.QED\n   -> {VV : () | (isAdmit x2 => false)\n                 && (not (isAdmit x2) => true)}","ident":"Liquid.Haskell.ProofCombinators.***","row":72,"col":3}},"101":{"7":{"ann":"a##xo","ident":"y","row":101,"col":7},"3":{"ann":"forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | VV == x1}\n   -> {VV : a##xo | VV == x1\n                    && VV == x2}","ident":"Liquid.Haskell.ProofCombinators.===","row":101,"col":3}},"56":{"1":{"ann":"()","ident":"Liquid.Haskell.ProofCombinators.trivial","row":56,"col":1}},"170":{"1":{"ann":"forall a##xo b##xo .\nx1:a##xo\n-> b##xo\n   -> {VV : a##xo | VV == x1}","ident":"Liquid.Haskell.ProofCombinators.withProof","row":170,"col":1},"11":{"ann":"a##xo","ident":"x","row":170,"col":11}},"134":{"1":{"ann":"forall a##xo .\nx1:a##xo\n-> x2:a##xo\n   -> {VV : a##xo | VV == x1\n                    && VV == x2}","ident":"Liquid.Haskell.ProofCombinators.==!","row":134,"col":1},"9":{"ann":"a##xo","ident":"y","row":134,"col":9}},"1":{"1":{"ann":"GHC.Types.Module","ident":"Liquid.Haskell.ProofCombinators.$trModule","row":1,"col":1}},"122":{"1":{"ann":"{VV : a##xo | papp1 pa VV}","ident":"x","row":122,"col":1},"3":{"ann":"forall a##xo b##xo <pa :: a##xo -> Bool, pb :: b##xo -> Bool> .\n{VV : a##xo<pa> | true}\n-> {VV : b##xo<pb> | true}\n   -> {VV : a##xo<pa> | true}","ident":"Liquid.Haskell.ProofCombinators.?","row":122,"col":3}},"158":{"7":{"ann":"a##xo","ident":"x","row":158,"col":7},"3":{"ann":"forall a##xo .\na##xo\n-> a##xo\n   -> a##xo","ident":"Liquid.Haskell.ProofCombinators.==.","row":158,"col":3}},"165":{"1":{"ann":"()","ident":"x","row":165,"col":1},"3":{"ann":"()\n-> ()\n   -> ()","ident":"Liquid.Haskell.ProofCombinators.&&&","row":165,"col":3}},"47":{"1":{"ann":"forall a##xo .\na##xo\n-> ()","ident":"Liquid.Haskell.ProofCombinators.toProof","row":47,"col":1}},"60":{"1":{"ann":"()","ident":"Liquid.Haskell.ProofCombinators.unreachable","row":60,"col":1}},"111":{"7":{"ann":"a##xo","ident":"y","row":111,"col":7},"3":{"ann":"forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | x1 >= VV}\n   -> {VV : a##xo | VV == x2}","ident":"Liquid.Haskell.ProofCombinators.=>=","row":111,"col":3}}},"sptypes":[{"start":{"line":1,"column":1},"ann":"GHC.Types.Module","ident":"Liquid.Haskell.ProofCombinators.$trModule","stop":{"line":1,"column":1}},{"start":{"line":47,"column":1},"ann":"forall a##xo .\na##xo\n-> ()","ident":"Liquid.Haskell.ProofCombinators.toProof","stop":{"line":47,"column":8}},{"start":{"line":56,"column":1},"ann":"()","ident":"Liquid.Haskell.ProofCombinators.trivial","stop":{"line":56,"column":8}},{"start":{"line":60,"column":1},"ann":"()","ident":"Liquid.Haskell.ProofCombinators.unreachable","stop":{"line":60,"column":12}},{"start":{"line":72,"column":3},"ann":"forall a##xo .\na##xo\n-> x2:Liquid.Haskell.ProofCombinators.QED\n   -> {VV : () | (isAdmit x2 => false)\n                 && (not (isAdmit x2) => true)}","ident":"Liquid.Haskell.ProofCombinators.***","stop":{"line":72,"column":6}},{"start":{"line":101,"column":3},"ann":"forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | VV == x1}\n   -> {VV : a##xo | VV == x1\n                    && VV == x2}","ident":"Liquid.Haskell.ProofCombinators.===","stop":{"line":101,"column":6}},{"start":{"line":101,"column":7},"ann":"a##xo","ident":"y","stop":{"line":101,"column":8}},{"start":{"line":106,"column":3},"ann":"forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | x1 <= VV}\n   -> {VV : a##xo | VV == x2}","ident":"Liquid.Haskell.ProofCombinators.=<=","stop":{"line":106,"column":6}},{"start":{"line":106,"column":7},"ann":"a##xo","ident":"y","stop":{"line":106,"column":8}},{"start":{"line":111,"column":3},"ann":"forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | x1 >= VV}\n   -> {VV : a##xo | VV == x2}","ident":"Liquid.Haskell.ProofCombinators.=>=","stop":{"line":111,"column":6}},{"start":{"line":111,"column":7},"ann":"a##xo","ident":"y","stop":{"line":111,"column":8}},{"start":{"line":122,"column":1},"ann":"{VV : a##xo | papp1 pa VV}","ident":"x","stop":{"line":122,"column":2}},{"start":{"line":122,"column":3},"ann":"forall a##xo b##xo <pa :: a##xo -> Bool, pb :: b##xo -> Bool> .\n{VV : a##xo<pa> | true}\n-> {VV : b##xo<pb> | true}\n   -> {VV : a##xo<pa> | true}","ident":"Liquid.Haskell.ProofCombinators.?","stop":{"line":122,"column":4}},{"start":{"line":134,"column":1},"ann":"forall a##xo .\nx1:a##xo\n-> x2:a##xo\n   -> {VV : a##xo | VV == x1\n                    && VV == x2}","ident":"Liquid.Haskell.ProofCombinators.==!","stop":{"line":134,"column":6}},{"start":{"line":134,"column":9},"ann":"a##xo","ident":"y","stop":{"line":134,"column":10}},{"start":{"line":158,"column":3},"ann":"forall a##xo .\na##xo\n-> a##xo\n   -> a##xo","ident":"Liquid.Haskell.ProofCombinators.==.","stop":{"line":158,"column":6}},{"start":{"line":158,"column":7},"ann":"a##xo","ident":"x","stop":{"line":158,"column":8}},{"start":{"line":165,"column":1},"ann":"()","ident":"x","stop":{"line":165,"column":2}},{"start":{"line":165,"column":3},"ann":"()\n-> ()\n   -> ()","ident":"Liquid.Haskell.ProofCombinators.&&&","stop":{"line":165,"column":6}},{"start":{"line":170,"column":1},"ann":"forall a##xo b##xo .\nx1:a##xo\n-> b##xo\n   -> {VV : a##xo | VV == x1}","ident":"Liquid.Haskell.ProofCombinators.withProof","stop":{"line":170,"column":10}},{"start":{"line":170,"column":11},"ann":"a##xo","ident":"x","stop":{"line":170,"column":12}},{"start":{"line":174,"column":1},"ann":"forall a##xo b##xo .\n{VV : a##xo | false}\n-> b##xo","ident":"Liquid.Haskell.ProofCombinators.impossible","stop":{"line":174,"column":11}},{"start":{"line":174,"column":16},"ann":"{v : (GHC.Classes.IP [GHC.Types.Char] GHC.Stack.Types.CallStack) | v == $dIP_a2gg}","ident":"$dIP_a2gg","stop":{"line":174,"column":25}}],"errors":[]}