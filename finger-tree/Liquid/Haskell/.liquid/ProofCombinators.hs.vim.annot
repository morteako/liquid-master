1:1-1:1::Liquid.Haskell.ProofCombinators.$trModule :: "GHC.Types.Module"
47:1-47:8::Liquid.Haskell.ProofCombinators.toProof :: "forall a##xo .\na##xo\n-> ()"
56:1-56:8::Liquid.Haskell.ProofCombinators.trivial :: "()"
60:1-60:12::Liquid.Haskell.ProofCombinators.unreachable :: "()"
72:3-72:6::Liquid.Haskell.ProofCombinators.*** :: "forall a##xo .\na##xo\n-> x2:Liquid.Haskell.ProofCombinators.QED\n   -> {VV : () | (isAdmit x2 => false)\n                 && (not (isAdmit x2) => true)}"
101:3-101:6::Liquid.Haskell.ProofCombinators.=== :: "forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | VV == x1}\n   -> {VV : a##xo | VV == x1\n                    && VV == x2}"
101:7-101:8::y :: "a##xo"
106:3-106:6::Liquid.Haskell.ProofCombinators.=<= :: "forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | x1 <= VV}\n   -> {VV : a##xo | VV == x2}"
106:7-106:8::y :: "a##xo"
111:3-111:6::Liquid.Haskell.ProofCombinators.=>= :: "forall a##xo .\nx1:a##xo\n-> x2:{VV : a##xo | x1 >= VV}\n   -> {VV : a##xo | VV == x2}"
111:7-111:8::y :: "a##xo"
122:1-122:2::x :: "{VV : a##xo | papp1 pa VV}"
122:3-122:4::Liquid.Haskell.ProofCombinators.? :: "forall a##xo b##xo <pa :: a##xo -> Bool, pb :: b##xo -> Bool> .\n{VV : a##xo<pa> | true}\n-> {VV : b##xo<pb> | true}\n   -> {VV : a##xo<pa> | true}"
134:1-134:6::Liquid.Haskell.ProofCombinators.==! :: "forall a##xo .\nx1:a##xo\n-> x2:a##xo\n   -> {VV : a##xo | VV == x1\n                    && VV == x2}"
134:9-134:10::y :: "a##xo"
158:3-158:6::Liquid.Haskell.ProofCombinators.==. :: "forall a##xo .\na##xo\n-> a##xo\n   -> a##xo"
158:7-158:8::x :: "a##xo"
165:1-165:2::x :: "()"
165:3-165:6::Liquid.Haskell.ProofCombinators.&&& :: "()\n-> ()\n   -> ()"
170:1-170:10::Liquid.Haskell.ProofCombinators.withProof :: "forall a##xo b##xo .\nx1:a##xo\n-> b##xo\n   -> {VV : a##xo | VV == x1}"
170:11-170:12::x :: "a##xo"
174:1-174:11::Liquid.Haskell.ProofCombinators.impossible :: "forall a##xo b##xo .\n{VV : a##xo | false}\n-> b##xo"
174:16-174:25::$dIP_a2gg :: "{v : (GHC.Classes.IP [GHC.Types.Char] GHC.Stack.Types.CallStack) | v == $dIP_a2gg}"